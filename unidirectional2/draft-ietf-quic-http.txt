



QUIC                                                      M. Bishop, Ed.
Internet-Draft                                                 Microsoft
Intended status: Standards Track                       February 24, 2017
Expires: August 28, 2017


              Hypertext Transfer Protocol (HTTP) over QUIC
                      draft-ietf-quic-http-latest

Abstract

   The QUIC transport protocol has several features that are desirable
   in a transport for HTTP, such as stream multiplexing, per-stream flow
   control, and low-latency connection establishment.  This document
   describes a mapping of HTTP semantics over QUIC.  Specifically, this
   document identifies HTTP/2 features that are subsumed by QUIC, and
   describes how the other features can be implemented atop QUIC.

Note to Readers

   Discussion of this draft takes place on the QUIC working group
   mailing list (quic@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/search/?email_list=quic .

   Working Group information can be found at https://github.com/quicwg ;
   source code and issues list for this draft can be found at
   https://github.com/quicwg/base-drafts/labels/http .

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 28, 2017.







Bishop                   Expires August 28, 2017                [Page 1]

Internet-Draft               HTTP over QUIC                February 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   3
   2.  QUIC Advertisement  . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  QUIC Version Hints  . . . . . . . . . . . . . . . . . . .   4
   3.  Connection Establishment  . . . . . . . . . . . . . . . . . .   4
     3.1.  Draft Version Identification  . . . . . . . . . . . . . .   5
   4.  Stream Mapping and Usage  . . . . . . . . . . . . . . . . . .   5
     4.1.  Stream Type Identifier  . . . . . . . . . . . . . . . . .   7
     4.2.  HTTP Message Exchanges  . . . . . . . . . . . . . . . . .   7
       4.2.1.  Header Compression  . . . . . . . . . . . . . . . . .   9
       4.2.2.  The CONNECT Method  . . . . . . . . . . . . . . . . .   9
       4.2.3.  Delta References  . . . . . . . . . . . . . . . . . .  10
     4.3.  Stream Priorities . . . . . . . . . . . . . . . . . . . .  11
     4.4.  Flow Control  . . . . . . . . . . . . . . . . . . . . . .  11
     4.5.  Server Push . . . . . . . . . . . . . . . . . . . . . . .  12
   5.  HTTP Framing Layer  . . . . . . . . . . . . . . . . . . . . .  12
     5.1.  Frame Layout  . . . . . . . . . . . . . . . . . . . . . .  13
     5.2.  Frame Definitions . . . . . . . . . . . . . . . . . . . .  13
       5.2.1.  DATA  . . . . . . . . . . . . . . . . . . . . . . . .  13
       5.2.2.  HEADERS . . . . . . . . . . . . . . . . . . . . . . .  14
       5.2.3.  PRIORITY  . . . . . . . . . . . . . . . . . . . . . .  15
       5.2.4.  RST_STREAM  . . . . . . . . . . . . . . . . . . . . .  16
       5.2.5.  SETTINGS  . . . . . . . . . . . . . . . . . . . . . .  16
       5.2.6.  PUSH_PROMISE  . . . . . . . . . . . . . . . . . . . .  19
       5.2.7.  PING  . . . . . . . . . . . . . . . . . . . . . . . .  20
       5.2.8.  GOAWAY frame  . . . . . . . . . . . . . . . . . . . .  20
       5.2.9.  WINDOW_UPDATE frame . . . . . . . . . . . . . . . . .  20
       5.2.10. CONTINUATION frame  . . . . . . . . . . . . . . . . .  20
       5.2.11. RESPONSE frame  . . . . . . . . . . . . . . . . . . .  20
   6.  Error Handling  . . . . . . . . . . . . . . . . . . . . . . .  21
     6.1.  HTTP-Defined QUIC Error Codes . . . . . . . . . . . . . .  21



Bishop                   Expires August 28, 2017                [Page 2]

Internet-Draft               HTTP over QUIC                February 2017


     6.2.  Mapping HTTP/2 Error Codes  . . . . . . . . . . . . . . .  22
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  23
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23
     8.1.  Registration of HTTP/QUIC Identification String . . . . .  23
     8.2.  Registration of QUIC Version Hint Alt-Svc Parameter . . .  23
     8.3.  Existing Frame Types  . . . . . . . . . . . . . . . . . .  24
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  25
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  25
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  26
   Appendix A.  Contributors . . . . . . . . . . . . . . . . . . . .  26
   Appendix B.  Change Log . . . . . . . . . . . . . . . . . . . . .  26
     B.1.  Since draft-ietf-quic-http-01:  . . . . . . . . . . . . .  26
     B.2.  Since draft-ietf-quic-http-00:  . . . . . . . . . . . . .  26
     B.3.  Since draft-shade-quic-http2-mapping-00:  . . . . . . . .  27
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  27

1.  Introduction

   The QUIC transport protocol has several features that are desirable
   in a transport for HTTP, such as stream multiplexing, per-stream flow
   control, and low-latency connection establishment.  This document
   describes a mapping of HTTP semantics over QUIC, drawing heavily on
   the existing TCP mapping, HTTP/2.  Specifically, this document
   identifies HTTP/2 features that are subsumed by QUIC, and describes
   how the other features can be implemented atop QUIC.

   QUIC is described in [QUIC-TRANSPORT].  For a full description of
   HTTP/2, see [RFC7540].

1.1.  Notational Conventions

   The words "MUST", "MUST NOT", "SHOULD", and "MAY" are used in this
   document.  It's not shouting; when they are capitalized, they have
   the special meaning defined in [RFC2119].

2.  QUIC Advertisement

   An HTTP origin advertises the availability of an equivalent HTTP/QUIC
   endpoint via the Alt-Svc HTTP response header or the HTTP/2 ALTSVC
   frame ([RFC7838]), using the ALPN token defined in Section 3.

   For example, an origin could indicate in an HTTP/1.1 or HTTP/2
   response that HTTP/QUIC was available on UDP port 443 at the same
   hostname by including the following header in any response:

   Alt-Svc: hq=":443"





Bishop                   Expires August 28, 2017                [Page 3]

Internet-Draft               HTTP over QUIC                February 2017


   On receipt of an Alt-Svc header indicating HTTP/QUIC support, a
   client MAY attempt to establish a QUIC connection to the indicated
   host and port and, if successful, send HTTP requests using the
   mapping described in this document.

   Connectivity problems (e.g. firewall blocking UDP) can result in QUIC
   connection establishment failure, in which case the client SHOULD
   continue using the existing connection or try another alternative
   endpoint offered by the origin.

2.1.  QUIC Version Hints

   This document defines the "quic" parameter for Alt-Svc, which MAY be
   used to provide version-negotiation hints to HTTP/QUIC clients.  QUIC
   versions are four-octet sequences with no additional constraints on
   format.  Syntax:

   quic = version-number
   version-number = 1*8HEXDIG; hex-encoded QUIC version

   Leading zeros SHOULD be omitted for brevity.  When multiple versions
   are supported, the "quic" parameter MAY be repeated multiple times in
   a single Alt-Svc entry.  For example, if a server supported both
   version 0x00000001 and the version rendered in ASCII as "Q034", it
   could specify the following header:

   Alt-Svc: hq=":443";quic=1;quic=51303334

   Where multiple versions are listed, the order of the values reflects
   the server's preference (with the first value being the most
   preferred version).  Origins SHOULD list only versions which are
   supported by the alternative, but MAY omit supported versions for any
   reason.

3.  Connection Establishment

   HTTP/QUIC connections are established as described in
   [QUIC-TRANSPORT].  During connection establishment, HTTP/QUIC support
   is indicated by selecting the ALPN token "hq" in the crypto
   handshake.

   While connection-level options pertaining to the core QUIC protocol
   are set in the initial crypto handshake, HTTP-specific settings are
   conveyed in the SETTINGS frame.  After the QUIC connection is
   established, a SETTINGS frame (Section 5.2.5) MUST be sent as the
   initial frame of the HTTP control stream (StreamID 3, see Section 4).
   The server MUST NOT send data on any other stream until the client's
   SETTINGS frame has been received.



Bishop                   Expires August 28, 2017                [Page 4]

Internet-Draft               HTTP over QUIC                February 2017


3.1.  Draft Version Identification

      *RFC Editor's Note:* Please remove this section prior to
      publication of a final version of this document.

   Only implementations of the final, published RFC can identify
   themselves as "hq".  Until such an RFC exists, implementations MUST
   NOT identify themselves using these strings.

   Implementations of draft versions of the protocol MUST add the string
   "-" and the corresponding draft number to the identifier.  For
   example, draft-ietf-quic-http-01 is identified using the string "hq-
   01".

   Non-compatible experiments that are based on these draft versions
   MUST append the string "-" and an experiment name to the identifier.
   For example, an experimental implementation based on draft-ietf-quic-
   http-09 which reserves an extra stream for unsolicited transmission
   of 1980s pop music might identify itself as "hq-09-rickroll".  Note
   that any label MUST conform to the "token" syntax defined in
   Section 3.2.6 of [RFC7230].  Experimenters are encouraged to
   coordinate their experiments on the quic@ietf.org mailing list.

4.  Stream Mapping and Usage

   A QUIC stream provides reliable in-order delivery of bytes in one
   direction, but makes no guarantees about order of delivery with
   regard to bytes on other streams.  On the wire, data is framed into
   QUIC STREAM frames, but this framing is invisible to the HTTP framing
   layer.  A QUIC receiver buffers and orders received STREAM frames,
   exposing the data contained within as a reliable byte stream to the
   application.

   QUIC reserves Stream 1 in both directions for crypto operations (the
   handshake, crypto config updates).  Each subsequent stream begins
   with a one-byte identifier that describes the stream type; see
   Section 4.1 for more details.

   Stream 2 in both directions is reserved for sending and receiving
   HTTP control frames, and is analogous to Stream 0 in HTTP/2.  Since
   most connection-level concerns from HTTP/2 will be managed by QUIC,
   the primary use of Stream 2 will be for SETTINGS and PRIORITY frames.

   When HTTP headers and data are sent over QUIC, the QUIC layer handles
   most of the stream management.  An HTTP request/response consumes up
   to two streams in each direction, with additional streams used by the
   server for promised responses.  Streams MUST be utilized sequentially
   by each peer, with no gaps.



Bishop                   Expires August 28, 2017                [Page 5]

Internet-Draft               HTTP over QUIC                February 2017


   The first stream created for a request or response is a message
   control stream and carries frames related to the request/response,
   including HEADERS.  The message control stream for a response to a
   client request MUST begin with a RESPONSE frame indicating the
   client's message control stream to which it responds.  Promised
   requests are carried by PUSH_PROMISE frames, which indicate the
   message control stream for the future response.

   For messages with bodies, a second stream is incorporated using a
   DATA frame.  This stream is a data stream and carries the message
   body with no additional framing.

   For example, the set of interconnected streams of a request/response
   might look like this:

   Client                                                  Server

     Stream 21 [Request Control] =============================>
       HEADERS [GET resource.html, etc.]

     <==========================  Stream 300 [Response Control]
       RESPONSE [Delta=0, Direction=0, StreamReference=21]
       PUSH_PROMISE [Delta=1, Direction=1, StreamReference=1,
             HeaderBlock=[GET res.css]]
       HEADERS [200, etc.]
       DATA [Delta=1, Direction=1, StreamReference=2]
       PUSH_PROMISE [Delta=1, Direction=1, StreamReference=3,
             HeaderBlock=[GET scr.js]]

     <==============================  Stream 301 [Push Control]
       HEADERS [200, etc.]
       DATA [Delta=1, Direction=1, StreamReference=3]

     <======================================  Stream 302 [Data]
       (body of resource.html)

     <==============================  Stream 303 [Push Control]
       HEADERS [200, etc.]
       DATA [Delta=1, Direction=1, StreamReference=2]

     <======================================  Stream 304 [Data]
       (body of res.css)

     <======================================  Stream 305 [Data]
       (body of scr.js)

                          Example Stream Exchange




Bishop                   Expires August 28, 2017                [Page 6]

Internet-Draft               HTTP over QUIC                February 2017


   HTTP does not need to do any separate multiplexing when using QUIC -
   data sent over a QUIC stream always maps to a particular HTTP
   transaction.  Requests and responses are considered complete when the
   corresponding QUIC streams are closed.

4.1.  Stream Type Identifier

   Each stream begins with a single byte identifying the stream type.
   This permits safe processing of subsequent frames and correlation of
   requests and responses.  The defined stream types are:

   Connection Control Stream (0x43):  Identifies the stream which will
      be used for connection-level control frames.  This MUST be the
      type of Stream 2; any other stream of this type MUST be treated as
      a session error of type HTTP_DUPLICATE_CONTROL_STREAM.  The first
      frame on this stream MUST be a SETTINGS frame (see Section 5.2.5).

   Request Control Stream (0x72):  Identifies the message control stream
      of an HTTP request from a client.  The frames on this stream will
      carry a single HTTP request.

   Response Control Stream (0x52):  Identifies the message control
      stream of a server's response to a client's HTTP request.  The
      first frame on this stream MUST be a RESPONSE frame (see
      Section 5.2.11) identifying the control stream of an HTTP client's
      request.  Subsequent frames on this stream will a single HTTP
      response.

   Push Control Stream (0x50):  Identifies the message control stream of
      a server's pushed response.  The frames on this stream will carry
      a single pushed HTTP response.

   Data Stream (0x44):  Identifies a data stream carrying the body of an
      HTTP request or response.  The contents of this stream MUST NOT be
      interpreted as frames.  The body SHOULD NOT be interpreted in any
      way until the stream has been explicitly referenced by a DATA
      frame on a message control stream.

4.2.  HTTP Message Exchanges

   A client begins sending an HTTP request on a new QUIC stream,
   identifying the stream as a Request Control Stream.

   An HTTP message (request or response) consists of:

   1.  one header block (see Section 5.2.2) on the control stream
       containing the message headers (see [RFC7230], Section 3.2),




Bishop                   Expires August 28, 2017                [Page 7]

Internet-Draft               HTTP over QUIC                February 2017


   2.  optionally:

       *  the payload body (see [RFC7230], Section 3.3), sent on a new
          Data Stream, and

       *  a DATA frame on the control stream indicating the associated
          Data Stream

   3.  optionally, one header block on the control stream containing the
       trailer-part, if present (see [RFC7230], Section 4.1.2).

   A response is sent on a Response Control Stream or a Push Control
   Stream.  Prior to sending the message header block indicated above, a
   response contains:

   o  a RESPONSE frame indicating which client stream contained the
      original request, if any (not present for pushed responses)

   o  zero or more header blocks on the control stream containing the
      message headers of informational (1xx) HTTP responses (see
      [RFC7230], Section 3.2 and [RFC7231], Section 6.2)

   The data stream MUST be closed immediately after the transfer of the
   body.  The "chunked" transfer encoding defined in Section 4.1 of
   [RFC7230] MUST NOT be used.

   Trailing header fields are carried in an additional header block on
   the message control stream.  Such a header block is a sequence of
   HEADERS frames with End Header Block set on the last frame.  Senders
   MUST send only one header block in the trailers section; receivers
   MUST decode any subsequent header blocks in order to maintain HPACK
   decoder state, but the resulting output MUST be discarded.

   An HTTP request/response exchange fully consumes one or two streams
   in each direction, or more if server push is used (see Section 4.5).
   After sending a request or a response, a peer closes its stream(s).

   A server can send a complete response prior to the client sending an
   entire request if the response does not depend on any portion of the
   request that has not been sent and received.  When this is true, a
   server MAY request that the client abort transmission of a request
   without error by triggering a QUIC REQUEST_RST on the client's data
   stream.  Clients MUST NOT discard complete responses as a result of
   receiving a REQUEST_RST, though clients can always discard responses
   at their discretion for other reasons.






Bishop                   Expires August 28, 2017                [Page 8]

Internet-Draft               HTTP over QUIC                February 2017


4.2.1.  Header Compression

   HTTP/QUIC uses HPACK header compression as described in [RFC7541].
   HPACK was designed for HTTP/2 with the assumption of in- order
   delivery such as that provided by TCP.  A sequence of encoded header
   blocks must arrive (and be decoded) at an endpoint in the same order
   in which they were encoded.  This ensures that the dynamic state at
   the two endpoints remains in sync.

   QUIC streams provide in-order delivery of data sent on those streams,
   but there are no guarantees about order of delivery between streams.
   To achieve in-order delivery of HEADERS frames in QUIC, the HPACK-
   bearing frames contain a counter which can be used to ensure in-order
   processing.  Data (request/response bodies) which arrive out of order
   are buffered until the corresponding HEADERS arrive.

   This does introduce head-of-line blocking: if the packet containing
   HEADERS for stream N is lost or reordered then the HEADERS for stream
   N+4 cannot be processed until it has been retransmitted successfully,
   even though the HEADERS for stream N+4 may have arrived.

   DISCUSS:  Keep HPACK with HOLB?  Redesign HPACK to be order-
      invariant?  How much do we need to retain compatibility with
      HTTP/2's HPACK?

      This stream design presumes that control streams can be safely
      aborted, which is not true of HPACK.  Requires adopting an abort-
      safe header compression scheme.

4.2.2.  The CONNECT Method

   The pseudo-method CONNECT ([RFC7231], Section 4.3.6) is primarily
   used with HTTP proxies to establish a TLS session with an origin
   server for the purposes of interacting with "https" resources.  In
   HTTP/1.x, CONNECT is used to convert an entire HTTP connection into a
   tunnel to a remote host.  In HTTP/2, the CONNECT method is used to
   establish a tunnel over a single HTTP/2 stream to a remote host for
   similar purposes.

   A CONNECT request in HTTP/QUIC functions in a similar manner as in
   HTTP/2, establishing a bidirectional TCP connection over a pair of
   QUIC streams.  The request MUST be formatted as described in
   [RFC7540], Section 8.3.  A CONNECT request that does not conform to
   these restrictions is malformed.  The message control stream carries
   a DATA frame indicating the client data stream which will carry the
   TCP traffic in the client-to-server direction.





Bishop                   Expires August 28, 2017                [Page 9]

Internet-Draft               HTTP over QUIC                February 2017


   A proxy that supports CONNECT establishes a TCP connection
   ([RFC0793]) to the server identified in the ":authority" pseudo-
   header field.  Once this connection is successfully established, the
   proxy sends a HEADERS frame containing a 2xx series status code to
   the client, as defined in [RFC7231], Section 4.3.6, on the message
   control stream, followed by a DATA frame indicating the server data
   stream which will carry the TCP traffic in the server-to-client
   direction.

   All QUIC STREAM frames on the message data streams correspond to data
   sent on the TCP connection.  Any QUIC STREAM frame sent by the client
   is transmitted by the proxy to the TCP server; data received from the
   TCP server is written to the server's data stream by the proxy.  Note
   that the size and number of TCP segments is not guaranteed to map
   predictably to the size and number of QUIC STREAM frames.

   The TCP connection can be closed by either peer.  When the client
   closes its data stream, the proxy will set the FIN bit on its
   connection to the TCP server.  When the proxy receives a packet with
   the FIN bit set, it will close its corresponding data stream.  TCP
   connections which remain half-closed in a single direction are not
   invalid, but are often handled poorly by servers, so clients SHOULD
   NOT close data streams while they are still expecting to receive data
   on the server's stream.

   A TCP connection error is signaled with RST_STREAM.  A proxy treats
   any error in the TCP connection, which includes receiving a TCP
   segment with the RST bit set, as a stream error of type
   HTTP_CONNECT_ERROR (Section 6.1).  Correspondingly, a proxy MUST send
   a TCP segment with the RST bit set if it detects an error with the
   stream or the QUIC connection.

4.2.3.  Delta References

   As described in Section 4, an HTTP request and response can encompass
   one or more streams in each direction.  DATA, PUSH_PROMISE, and
   RESPONSE frames are used to correlate them.

   Because related streams will often be near each other in the Stream
   ID space, it will often be efficient to encode the referenced stream
   ID relative to the stream on which these frames are sent.  When this
   is the case, the Delta flag may be used to indicate that the Stream
   Reference field should be added to (Direction flag set) or subtracted
   from (Direction flag unset) the current Stream ID.

   If the stream indicated by a Delta Reference is not a valid QUIC
   stream number (e.g. a DATA frame on Stream 6 has the Delta flag set,
   the Direction flag unset, and a Stream Reference value of 100), the



Bishop                   Expires August 28, 2017               [Page 10]

Internet-Draft               HTTP over QUIC                February 2017


   connection MUST be closed with an error of type
   HTTP_INVALID_STREAM_REFERENCE.

   Each stream may be referenced only once by another stream.  If a
   duplicate reference is detected, it MUST be treated as a stream error
   of type HTTP_DUPLICATE_REFERENCE on the referenced stream and all
   streams which reference it.

4.3.  Stream Priorities

   HTTP/QUIC uses the priority scheme described in [RFC7540]
   Section 5.3.  In this priority scheme, a given stream can be
   designated as dependent upon another stream, which expresses the
   preference that the latter stream (the "parent" stream) be allocated
   resources before the former stream (the "dependent" stream).  Taken
   together, the dependencies across all streams in a connection form a
   dependency tree.  The structure of the dependency tree changes as
   HEADERS and PRIORITY frames add, remove, or change the dependency
   links between streams.

   Implicit in this scheme is the notion of in-order delivery of
   priority changes (i.e., dependency tree mutations): since operations
   on the dependency tree such as reparenting a subtree are not
   commutative, both sender and receiver must apply them in the same
   order to ensure that both sides have a consistent view of the stream
   dependency tree.  HTTP/2 specifies priority assignments in PRIORITY
   frames and (optionally) in HEADERS frames.  To achieve in-order
   delivery of priority changes in HTTP/QUIC, PRIORITY frames are sent
   on the connection control stream and the PRIORITY section is removed
   from the HEADERS frame.  The semantics of the Stream Dependency,
   Weight, E flag, and (for HEADERS frames) PRIORITY flag are the same
   as in HTTP/2.

   For consistency's sake, all PRIORITY frames MUST refer to the
   client's message control stream of the dependent request, not the
   data stream or any associated server stream.

4.4.  Flow Control

   QUIC provides stream and connection level flow control, similar in
   principle to HTTP/2's flow control but with some implementation
   differences.  As flow control is handled by QUIC, the HTTP mapping
   need not concern itself with maintaining flow control state.  The
   HTTP mapping MUST NOT send WINDOW_UPDATE frames at the HTTP level.







Bishop                   Expires August 28, 2017               [Page 11]

Internet-Draft               HTTP over QUIC                February 2017


4.5.  Server Push

   HTTP/QUIC supports server push as described in [RFC7540].  During
   connection establishment, the client indicates whether it is willing
   to receive server pushes via the SETTINGS_ENABLE_PUSH setting in the
   SETTINGS frame (see Section 3), which defaults to 1 (true).

   Similar to server push for HTTP/2, the server initiates a server push
   by sending a PUSH_PROMISE frame containing the Stream ID of the
   stream to be pushed, as well as request header fields attributed to
   the request.  The PUSH_PROMISE frame is sent on the control stream
   being used to respond to the request, with the Stream Reference field
   specifying the Stream ID of the control stream for the response.

   On that stream, the server push response is conveyed in the same way
   as a non-server-push response, with response headers and (if present)
   trailers carried by HEADERS frames sent on the control stream, and
   response body (if any) sent via the corresponding data stream and
   indicated using a DATA frame.  No RESPONSE frame is used to indicate
   a request stream.

   If a promised push stream is not needed by the client, the client
   SHOULD send a QUIC REQUEST_RST on the promised stream with an
   appropriate error code (e.g.  HTTP_PUSH_REFUSED,
   HTTP_PUSH_ALREADY_IN_CACHE; see Section 6).  This asks the server not
   to transfer the data and indicates that it will be discarded upon
   receipt.

5.  HTTP Framing Layer

   Many framing concepts from HTTP/2 can be elided away on QUIC, because
   the transport deals with them.  Because frames are already on a
   stream, they can omit the stream number unless the payload of the
   frame refers to another stream.  Because frames do not block
   multiplexing (QUIC's multiplexing occurs below this layer), the
   support for variable-maximum-length packets can be removed.  Because
   stream termination is handled by QUIC, an END_STREAM flag is not
   required.

   Frames are used only on the connection (stream 3) and message
   (streams 5, 9, etc.) control streams.  Other streams carry data
   payload and are not framed at the HTTP layer.

   Frame payloads are largely drawn from [RFC7540].  However, QUIC
   includes some features (e.g. flow control) which are also present in
   HTTP/2.  In these cases, the HTTP mapping need not re-implement them.
   As a result, some frame types are not required when using QUIC.
   Where an HTTP/2-defined frame is no longer used, the frame ID is



Bishop                   Expires August 28, 2017               [Page 12]

Internet-Draft               HTTP over QUIC                February 2017


   reserved in order to maximize portability between HTTP/2 and HTTP/
   QUIC implementations.  However, equivalent frames between the two
   mappings are not identical.

   This section describes HTTP framing in QUIC and highlights
   differences from HTTP/2 framing.

5.1.  Frame Layout

   All frames have the following format:

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |           Length (16)         |     Type (8)  |   Flags (8)   |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                       Frame Payload (*)                     ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 1: HTTP/QUIC frame format

5.2.  Frame Definitions

5.2.1.  DATA

   The DATA frame (type=0x00) is used to identify the Data Stream on
   which the server intends to send the body associated with an HTTP
   message.  It defines the following flags:

   Delta (0x01):  Indicates the length and interpretation of the Stream
      Reference field.

   Direction (0x02):  When the Delta flag is set, indicates whether the
      reference is to a higher (set) or lower (unset) Stream ID.  MUST
      NOT be set if the Delta flag is not set.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Stream Reference (8/32)                  ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                       Figure 2: DATA frame payload

   The payload consists of:






Bishop                   Expires August 28, 2017               [Page 13]

Internet-Draft               HTTP over QUIC                February 2017


   Stream Reference:  When the Delta flag is set, this field is 8 bits
      long and is relative to the current Stream ID.  Otherwise, this
      field is 32 bits long and is an explicit Stream ID.

   See Section 4.2.3 for more information about stream-to-stream
   references.

5.2.2.  HEADERS

   The HEADERS frame (type=0x1) is used to carry part of a header set,
   compressed using HPACK [RFC7541].  Because HEADERS frames from
   different streams will be delivered out-of-order and priority-changes
   are not commutative, the PRIORITY region of HEADERS is not supported.
   A separate PRIORITY frame MUST be used.

   HTTP/2 padding is not defined and MUST NOT be used.  One flag is
   defined:

   End Header Block (0x4):  This frame concludes a header block.

   A HEADERS frame with any other flags set MUST be treated as a
   connection error of type HTTP_MALFORMED_HEADERS.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |       Sequence? (16)          |    Header Block Fragment (*)...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Figure 3: HEADERS frame payload

   The HEADERS frame payload has the following fields:

   Sequence Number:  Present only on the first frame of a header block
      sequence.  This MUST be set to zero on the first header block
      sequence, and incremented on each header block.

   The next frame on the same stream after a HEADERS frame without the
   EHB flag set MUST be another HEADERS frame.  A receiver MUST treat
   the receipt of any other type of frame as a stream error of type
   HTTP_INTERRUPTED_HEADERS.  (Note that QUIC can intersperse data from
   other streams between frames, or even during transmission of frames,
   so multiplexing is not blocked by this requirement.)

   A full header block is contained in a sequence of zero or more
   HEADERS frames without EHB set, followed by a HEADERS frame with EHB
   set.




Bishop                   Expires August 28, 2017               [Page 14]

Internet-Draft               HTTP over QUIC                February 2017


   On receipt, header blocks (HEADERS, PUSH_PROMISE) MUST be processed
   by the HPACK decoder in sequence.  If a block is missing, all
   subsequent HPACK frames MUST be held until it arrives, or the
   connection terminated.

   When the Sequence counter reaches its maximum value (0xFFFF), the
   next increment returns it to zero.  An endpoint MUST NOT wrap the
   Sequence counter to zero until the previous zero-value header block
   has been confirmed received.

5.2.3.  PRIORITY

   The PRIORITY (type=0x02) frame specifies the sender-advised priority
   of a stream and is substantially different from [RFC7540].  In order
   to support ordering, it MUST be sent only on the connection control
   stream.  The format has been modified to accommodate not being sent
   on-stream and the larger stream ID space of QUIC.

   The flags defined are:

   E (0x01):  Indicates that the stream dependency is exclusive (see
      [RFC7540] Section 5.3).

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                   Prioritized Stream (32)                     |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Dependent Stream (32)                      |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |   Weight (8)  |
      +-+-+-+-+-+-+-+-+

                     Figure 4: PRIORITY frame payload

   The HEADERS frame payload has the following fields:

   Prioritized Stream:  A 32-bit stream identifier for the message
      control stream whose priority is being updated.

   Stream Dependency:  A 32-bit stream identifier for the stream that
      this stream depends on (see Section 4.3 and {!RFC7540}}
      Section 5.3).

   Weight:  An unsigned 8-bit integer representing a priority weight for
      the stream (see [RFC7540] Section 5.3).  Add one to the value to
      obtain a weight between 1 and 256.




Bishop                   Expires August 28, 2017               [Page 15]

Internet-Draft               HTTP over QUIC                February 2017


   A PRIORITY frame MUST have a payload length of nine octets.  A
   PRIORITY frame of any other length MUST be treated as a connection
   error of type HTTP_MALFORMED_PRIORITY.

5.2.4.  RST_STREAM

   RST_STREAM frames do not exist, since QUIC provides stream lifecycle
   management.  Frame type 0x3 is reserved.

5.2.5.  SETTINGS

   The SETTINGS frame (type=0x4) conveys configuration parameters that
   affect how endpoints communicate, such as preferences and constraints
   on peer behavior, and is substantially different from [RFC7540].
   Individually, a SETTINGS parameter can also be referred to as a
   "setting".

   SETTINGS parameters are not negotiated; they describe characteristics
   of the sending peer, which can be used by the receiving peer.
   However, a negotiation can be implied by the use of SETTINGS - a peer
   uses SETTINGS to advertise a set of supported values.  The recipient
   can then choose which entries from this list are also acceptable and
   proceed with the value it has chosen.  (This choice could be
   announced in a field of an extension frame, or in its own value in
   SETTINGS.)

   Different values for the same parameter can be advertised by each
   peer.  For example, a client might permit a very large HPACK state
   table while a server chooses to use a small one to conserve memory.

   Parameters MUST NOT occur more than once.  A receiver MAY treat the
   presence of the same parameter more than once as a connection error
   of type HTTP_MALFORMED_SETTINGS.

   The SETTINGS frame defines no flags.

   The payload of a SETTINGS frame consists of zero or more parameters,
   each consisting of an unsigned 16-bit setting identifier and a
   length-prefixed binary value.












Bishop                   Expires August 28, 2017               [Page 16]

Internet-Draft               HTTP over QUIC                February 2017


       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |        Identifier (16)        |         Length (16)           |
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                          Contents (?)                       ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                      Figure 5: SETTINGS value format

   A zero-length content indicates that the setting value is a Boolean
   and true.  False is indicated by the absence of the setting.

   Non-zero-length values MUST be compared against the remaining length
   of the SETTINGS frame.  Any value which purports to cross the end of
   the frame MUST cause the SETTINGS frame to be considered malformed
   and trigger a connection error of type HTTP_MALFORMED_SETTINGS.

   An implementation MUST ignore the contents for any SETTINGS
   identifier it does not understand.

   SETTINGS frames always apply to a connection, never a single stream.
   A SETTINGS frame MUST be sent as the first frame of the connection
   control stream (see Section 4) by each peer, and MUST NOT be sent
   subsequently or on any other stream.  If an endpoint receives an
   SETTINGS frame on a different stream, the endpoint MUST respond with
   a connection error of type HTTP_SETTINGS_ON_WRONG_STREAM.  If an
   endpoint receives a second SETTINGS frame, the endpoint MUST respond
   with a connection error of type HTTP_MULTIPLE_SETTINGS.

   The SETTINGS frame affects connection state.  A badly formed or
   incomplete SETTINGS frame MUST be treated as a connection error
   (Section 5.4.1) of type HTTP_MALFORMED_SETTINGS.

5.2.5.1.  Integer encoding

   Settings which are integers are transmitted in network byte order.
   Leading zero octets are permitted, but implementations SHOULD use
   only as many bytes as are needed to represent the value.  An integer
   MUST NOT be represented in more bytes than would be used to transfer
   the maximum permitted value.

5.2.5.2.  Defined SETTINGS Parameters

   Some transport-level options that HTTP/2 specifies via the SETTINGS
   frame are superseded by QUIC transport parameters in HTTP/QUIC.
   Below is a listing of how each HTTP/2 SETTINGS parameter is mapped:




Bishop                   Expires August 28, 2017               [Page 17]

Internet-Draft               HTTP over QUIC                February 2017


   SETTINGS_HEADER_TABLE_SIZE:  An integer with a maximum value of 2^32
      - 1.

   SETTINGS_DISABLE_PUSH:  Transmitted as a Boolean; replaces
      SETTINGS_ENABLE_PUSH

   SETTINGS_MAX_CONCURRENT_STREAMS:  QUIC requires the maximum number of
      incoming streams per connection to be specified in the initial
      crypto handshake, using the "MSPC" tag.  Specifying
      SETTINGS_MAX_CONCURRENT_STREAMS in the SETTINGS frame is an error.

   SETTINGS_INITIAL_WINDOW_SIZE:  QUIC requires both stream and
      connection flow control window sizes to be specified in the
      initial crypto handshake, using the "SFCW" and "CFCW" tags,
      respectively.  Specifying SETTINGS_INITIAL_WINDOW_SIZE in the
      SETTINGS frame is an error.

   SETTINGS_MAX_FRAME_SIZE:  This setting has no equivalent in QUIC.
      Specifying it in the SETTINGS frame is an error.

   SETTINGS_MAX_HEADER_LIST_SIZE:  An integer with a maximum value of
      2^32 - 1.

5.2.5.3.  Usage in 0-RTT

   When a 0-RTT QUIC connection is being used, the client's initial
   requests will be sent before the arrival of the server's SETTINGS
   frame.  Clients SHOULD cache at least the following settings about
   servers:

   o  SETTINGS_HEADER_TABLE_SIZE

   o  SETTINGS_MAX_HEADER_LIST_SIZE

   Clients MUST comply with cached settings until the server's current
   settings are received.  If a client does not have cached values, it
   SHOULD assume the following values:

   o  SETTINGS_HEADER_TABLE_SIZE: 0 octets

   o  SETTINGS_MAX_HEADER_LIST_SIZE: 16,384 octets

   Servers MAY continue processing data from clients which exceed its
   current configuration during the initial flight.  In this case, the
   client MUST apply the new settings immediately upon receipt.

   If the connection is closed because these or other constraints were
   violated during the 0-RTT flight (e.g. with



Bishop                   Expires August 28, 2017               [Page 18]

Internet-Draft               HTTP over QUIC                February 2017


   HTTP_HPACK_DECOMPRESSION_FAILED), clients MAY establish a new
   connection and retry any 0-RTT requests using the settings sent by
   the server on the closed connection.  (This assumes that only
   requests that are safe to retry are sent in 0-RTT.)  If the
   connection was closed before the SETTINGS frame was received, clients
   SHOULD discard any cached values and use the defaults above on the
   next connection.

5.2.6.  PUSH_PROMISE

   The PUSH_PROMISE frame (type=0x05) is used to carry a request header
   set from server to client, similar to PUSH_PROMISE in HTTP/2, and
   identify the Push Control Stream on which the server intends to send
   the response.  It defines the following flags:

   Delta (0x01):  Indicates the length and interpretation of the Stream
      Reference field.

   Direction (0x02):  When the Delta flag is set, indicates whether the
      reference is to a higher (set) or lower (unset) Stream ID.  MUST
      NOT be set if the Delta flag is not set.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Stream Reference (8/32)                  ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |         Sequence (16)         |       Header Block (*)      ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                   Figure 6: PUSH_PROMISE frame payload

   The payload consists of:

   Stream Reference:  When the Delta flag is set, this field is 8 bits
      long and is relative to the current Stream ID.  Otherwise, this
      field is 32 bits long and is an explicit Stream ID.

   HPACK Sequence:  A sixteen-bit counter, equivalent to the Sequence
      field in HEADERS.

   Header Block:  HPACK-compressed request headers for the promised
      response.

   See Section 4.2.3 for more information about stream-to-stream
   references.





Bishop                   Expires August 28, 2017               [Page 19]

Internet-Draft               HTTP over QUIC                February 2017


5.2.7.  PING

   PING frames do not exist, since QUIC provides equivalent
   functionality.  Frame type 0x6 is reserved.

5.2.8.  GOAWAY frame

   GOAWAY frames do not exist, since QUIC provides equivalent
   functionality.  Frame type 0x7 is reserved.

5.2.9.  WINDOW_UPDATE frame

   WINDOW_UPDATE frames do not exist, since QUIC provides equivalent
   functionality.  Frame type 0x8 is reserved.

5.2.10.  CONTINUATION frame

   CONTINUATION frames do not exist, since larger supported HEADERS/
   PUSH_PROMISE frames provide equivalent functionality.  Frame type 0x9
   is reserved.

5.2.11.  RESPONSE frame

   The RESPONSE frame (type=0xB) is used by a server to identify the
   client's Request Control Stream to which the server is responding.
   It defines the following flags:

   Delta (0x01):  Indicates the length and interpretation of the Stream
      Reference field.

   Direction (0x02):  When the Delta flag is set, indicates whether the
      reference is to a higher (set) or lower (unset) Stream ID.  MUST
      NOT be set if the Delta flag is not set.

       0                   1                   2                   3
       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      |                    Stream Reference (8/32)                  ...
      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

                     Figure 7: RESPONSE frame payload

   The payload consists of:

   Stream Reference:  When the Delta flag is set, this field is 8 bits
      long and is relative to the current Stream ID.  Otherwise, this
      field is 32 bits long and is an explicit Stream ID.




Bishop                   Expires August 28, 2017               [Page 20]

Internet-Draft               HTTP over QUIC                February 2017


   See Section 4.2.3 for more information about stream-to-stream
   references.

6.  Error Handling

   This section describes the specific error codes defined by HTTP and
   the mapping of HTTP/2 error codes into the QUIC error code space.

6.1.  HTTP-Defined QUIC Error Codes

   QUIC allocates error codes 0x0000-0x3FFF to application protocol
   definition.  The following error codes are defined by HTTP for use in
   QUIC RST_STREAM, GOAWAY, and CONNECTION_CLOSE frames.

   HTTP_PUSH_REFUSED (0x01):  The server has attempted to push content
      which the client will not accept on this connection.

   HTTP_INTERNAL_ERROR (0x02):  An internal error has occurred in the
      HTTP stack.

   HTTP_PUSH_ALREADY_IN_CACHE (0x03):  The server has attempted to push
      content which the client has cached.

   HTTP_REQUEST_CANCELLED (0x04):  The client no longer needs the
      requested data.

   HTTP_HPACK_DECOMPRESSION_FAILED (0x05):  HPACK failed to decompress a
      frame and cannot continue.

   HTTP_CONNECT_ERROR (0x06):  The connection established in response to
      a CONNECT request was reset or abnormally closed.

   HTTP_EXCESSIVE_LOAD (0x07):  The endpoint detected that its peer is
      exhibiting a behavior that might be generating excessive load.

   HTTP_VERSION_FALLBACK (0x08):  The requested operation cannot be
      served over HTTP/QUIC.  The peer should retry over HTTP/2.

   HTTP_MALFORMED_HEADERS (0x09):  A HEADERS frame has been received
      with an invalid format.

   HTTP_MALFORMED_PRIORITY (0x0A):  A PRIORITY frame has been received
      with an invalid format.

   HTTP_MALFORMED_SETTINGS (0x0B):  A SETTINGS frame has been received
      with an invalid format.





Bishop                   Expires August 28, 2017               [Page 21]

Internet-Draft               HTTP over QUIC                February 2017


   HTTP_INTERRUPTED_HEADERS (0x0E):  A HEADERS frame without the End
      Header Block flag was followed by a frame other than HEADERS.

   HTTP_SETTINGS_ON_WRONG_STREAM (0x0F):  A SETTINGS frame was received
      on a request control stream.

   HTTP_MULTIPLE_SETTINGS (0x10):  More than one SETTINGS frame was
      received.

   HTTP_INVALID_STREAM_REFERENCE (0x11):  A stream referenced an invalid
      Stream ID.  See Section 4.2.3 for more details.

   HTTP_DUPLICATE_CONTROL_STREAM (0x12):  A stream other than Stream 2
      was declared as a Connection Control Stream.

   HTTP_DUPLICATE_REFERENCE (0x13):  Multiple streams attempted to
      reference the same stream.  See Section 4.2.3 for more details.

6.2.  Mapping HTTP/2 Error Codes

   The HTTP/2 error codes defined in Section 7 of [RFC7540] map to QUIC
   error codes as follows:

   NO_ERROR (0x0):  QUIC_NO_ERROR

   PROTOCOL_ERROR (0x1):  No single mapping.  See new HTTP_MALFORMED_*
      error codes defined in Section 6.1.

   INTERNAL_ERROR (0x2)  HTTP_INTERNAL_ERROR in Section 6.1.

   FLOW_CONTROL_ERROR (0x3):  Not applicable, since QUIC handles flow
      control.  Would provoke a QUIC_FLOW_CONTROL_RECEIVED_TOO_MUCH_DATA
      from the QUIC layer.

   SETTINGS_TIMEOUT (0x4):  Not applicable, since no acknowledgement of
      SETTINGS is defined.

   STREAM_CLOSED (0x5):  Not applicable, since QUIC handles stream
      management.  Would provoke a QUIC_STREAM_DATA_AFTER_TERMINATION
      from the QUIC layer.

   FRAME_SIZE_ERROR (0x6)  No single mapping.  See new error codes
      defined in Section 6.1.

   REFUSED_STREAM (0x7):  Not applicable, since QUIC handles stream
      management.  Would provoke a QUIC_TOO_MANY_OPEN_STREAMS from the
      QUIC layer.




Bishop                   Expires August 28, 2017               [Page 22]

Internet-Draft               HTTP over QUIC                February 2017


   CANCEL (0x8):  HTTP_REQUEST_CANCELLED in Section 6.1.

   COMPRESSION_ERROR (0x9):  HTTP_HPACK_DECOMPRESSION_FAILED in
      Section 6.1.

   CONNECT_ERROR (0xa):  HTTP_CONNECT_ERROR in Section 6.1.

   ENHANCE_YOUR_CALM (0xb):  HTTP_EXCESSIVE_LOAD in Section 6.1.

   INADEQUATE_SECURITY (0xc):  Not applicable, since QUIC is assumed to
      provide sufficient security on all connections.

   HTTP_1_1_REQUIRED (0xd):  HTTP_VERSION_FALLBACK in Section 6.1.

   TODO: fill in missing error code mappings.

7.  Security Considerations

   The security considerations of HTTP over QUIC should be comparable to
   those of HTTP/2.

   The modified SETTINGS format contains nested length elements, which
   could pose a security risk to an uncautious implementer.  A SETTINGS
   frame parser MUST ensure that the length of the frame exactly matches
   the length of the settings it contains.

8.  IANA Considerations

8.1.  Registration of HTTP/QUIC Identification String

   This document creates a new registration for the identification of
   HTTP/QUIC in the "Application Layer Protocol Negotiation (ALPN)
   Protocol IDs" registry established in [RFC7301].

   The "hq" string identifies HTTP/QUIC:

   Protocol:  HTTP over QUIC

   Identification Sequence:  0x68 0x71 ("hq")

   Specification:  This document

8.2.  Registration of QUIC Version Hint Alt-Svc Parameter

   This document creates a new registration for version-negotiation
   hints in the "Hypertext Transfer Protocol (HTTP) Alt-Svc Parameter"
   registry established in [RFC7838].




Bishop                   Expires August 28, 2017               [Page 23]

Internet-Draft               HTTP over QUIC                February 2017


   Parameter:  "quic"

   Specification:  This document, Section 2.1

8.3.  Existing Frame Types

   This document adds two new columns to the "HTTP/2 Frame Type"
   registry defined in [RFC7540]:

   Supported Protocols:  Indicates which associated protocols use the
      frame type.  Values MUST be one of:

      *  "HTTP/2 only"

      *  "HTTP/QUIC only"

      *  "Both"

   HTTP/QUIC Specification:  Indicates where this frame's behavior over
      QUIC is defined; required if the frame is supported over QUIC.

   Values for existing registrations are assigned by this document:

     +---------------+---------------------+-------------------------+
     | Frame Type    | Supported Protocols | HTTP/QUIC Specification |
     +---------------+---------------------+-------------------------+
     | DATA          |         Both        | Section 5.2.1           |
     |               |                     |                         |
     | HEADERS       |         Both        | Section 5.2.2           |
     |               |                     |                         |
     | PRIORITY      |         Both        | Section 5.2.3           |
     |               |                     |                         |
     | RST_STREAM    |     HTTP/2 only     | N/A                     |
     |               |                     |                         |
     | SETTINGS      |         Both        | Section 5.2.5           |
     |               |                     |                         |
     | PUSH_PROMISE  |         Both        | Section 5.2.6           |
     |               |                     |                         |
     | PING          |     HTTP/2 only     | N/A                     |
     |               |                     |                         |
     | GOAWAY        |     HTTP/2 only     | N/A                     |
     |               |                     |                         |
     | WINDOW_UPDATE |     HTTP/2 only     | N/A                     |
     |               |                     |                         |
     | CONTINUATION  |     HTTP/2 only     | N/A                     |
     +---------------+---------------------+-------------------------+





Bishop                   Expires August 28, 2017               [Page 24]

Internet-Draft               HTTP over QUIC                February 2017


   The "Specification" column is renamed to "HTTP/2 specification" and
   is only required if the frame is supported over HTTP/2.

   One new frame type is added by this document:

   Frame Type:  RESPONSE

   Code:  0x0B

   Supported Protocols:  HTTP/QUIC only

   HTTP/QUIC Specification:  Section 5.2.11

9.  References

9.1.  Normative References

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport".

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <http://www.rfc-editor.org/info/rfc7540>.

   [RFC7541]  Peon, R. and H. Ruellan, "HPACK: Header Compression for
              HTTP/2", RFC 7541, DOI 10.17487/RFC7541, May 2015,
              <http://www.rfc-editor.org/info/rfc7541>.



Bishop                   Expires August 28, 2017               [Page 25]

Internet-Draft               HTTP over QUIC                February 2017


   [RFC7838]  Nottingham, M., McManus, P., and J. Reschke, "HTTP
              Alternative Services", RFC 7838, DOI 10.17487/RFC7838,
              April 2016, <http://www.rfc-editor.org/info/rfc7838>.

9.2.  Informative References

   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

Appendix A.  Contributors

   The original authors of this specification were Robbie Shade and Mike
   Warres.

Appendix B.  Change Log

      *RFC Editor's Note:* Please remove this section prior to
      publication of a final version of this document.

B.1.  Since draft-ietf-quic-http-01:

   o  SETTINGS can be sent only one at the start of a connection.
      SETTINGS_ACK removed.

B.2.  Since draft-ietf-quic-http-00:

   o  Changed "HTTP/2-over-QUIC" to "HTTP/QUIC" throughout

   o  Changed from using HTTP/2 framing within Stream 3 to new framing
      format and two-stream-per-request model

   o  Adopted SETTINGS format from draft-bishop-httpbis-extended-
      settings-01

   o  Reworked SETTINGS_ACK to account for indeterminate inter-stream
      order.

   o  Described CONNECT pseudo-method

   o  Updated ALPN token and Alt-Svc guidance

   o  Application-layer-defined error codes







Bishop                   Expires August 28, 2017               [Page 26]

Internet-Draft               HTTP over QUIC                February 2017


B.3.  Since draft-shade-quic-http2-mapping-00:

   o  Adopted as base for draft-ietf-quic-http.

   o  Updated authors/editors list.

Author's Address

   Mike Bishop (editor)
   Microsoft

   Email: Michael.Bishop@microsoft.com







































Bishop                   Expires August 28, 2017               [Page 27]
